## no critic ( RequireEndWithOne RequireExplicitPackage RequireTidyCode RequireUseStrict RequireUseWarnings RequireVersionVar )

dist_name     => 'Benchmark-Mark'
dist_abstract => 'Simple code benchmarking/timing'
dist_author   => 'Roy Ivy III <rivy@cpan.org>'

exports_aref  => [ qw/ mark / ] ## exports_aref => { 'Benchmark::Mark' => [ qw / mark / ] } ## exports_aref => { $config{'module_name'} => [ qw / mark / ] }

license         => 'artistic_2'     # NOTE: VALID licenses: perl => 'http://dev.perl.org/licenses', apache => 'http://apache.org/licenses/LICENSE-2.0', artistic => 'http://opensource.org/licenses/artistic-license.php', artistic_2 => 'http://opensource.org/licenses/artistic-license-2.0.php', lgpl => 'http://opensource.org/licenses/lgpl-license.php', bsd => 'http://opensource.org/licenses/bsd-license.php', gpl => 'http://opensource.org/licenses/gpl-license.php', mit => 'http://opensource.org/licenses/mit-license.php', mozilla => 'http://opensource.org/licenses/mozilla1.1.php', open_source => undef, unrestricted => undef, restrictive => undef, unknown => undef

#

user_ci_appveyor_key  => '1ftgirtqfac8xym6'     # per-project value

#

dist_cpan_id          => 'rivy'
dist_metacpan_id      => (uc 'rivy')
dist_signature_id     => $config{'dist_author'}
dist_repo_id          => 'rivy'
dist_repo_web_path    => q{/} . $config{'dist_repo_id'} . '/perl.' . $config{'dist_name'}
dist_repo_web         => 'https://github.com' . $config{'dist_repo_web_path'}
dist_repo             => $config{'dist_repo_web'} . '.git'

# * per-project/user calculated values (generally static)

dist_cpan             => 'https://http://search.cpan.org/~' . $config{'dist_cpan_id'} . $config{'module_name'}
dist_issues           => $config{'dist_repo_web'} . '/issues'
dist_metacpan         => 'https://metacpan.org/pod/' . $config{'module_name'}
meta_add_href         => { %{$config{meta_add_href}}, x_authority => 'cpan:'.(uc $config{'dist_cpan_id'}) }
meta_merge_href       => { %{$config{meta_merge_href}}, resources => { bugtracker => { web => $config{'dist_issues'} }, homepage => $config{'dist_repo_web'}, repository => { type => 'git', url => $config{'dist_repo'}, web => $config{'dist_repo_web'} } } }
user_ci_appveyor_path => '/project' . ( do { my $s = $config{'dist_repo_web_path'}; $s =~ s/[.]/-/gmsx; $s; } )

# NOTE: see Module::CoreList->first_release('<MODULE>') for CORE module release information

# requires_href => { %{$config{'requires_href'}}, }
recommends_href => { %{$config{'recommends_href'}}, 'Benchmark' => '0', 'Time::HiRes' => 0 , }

#configure_requires_href => { %{$config{'configure_requires_href'}}, MODULE => VERSION, ... , }
#build_requires_href => { %{$config{'build_requires_href'}}, MODULE => VERSION, ... , }

test_requires_href => { %{$config{'test_requires_href'}}, }
test_recommends_href => { %{$config{'test_recommends_href'}}, 'Test::MinimumVersion' => '0.008', 'Test::Perl::Critic' => 0, 'Test::Pod' => 0, 'Test::Pod::Coverage' => 0, 'Test::Without' => 0, }   ## for minimal AUTOMATED/CI author tests

no_index_href => { %{$config{'no_index_href'}}, directory => [ 'eg', 'extras', 'notes', @{$config{'no_index_href'}{directory}} ], }
no_index_href => { %{$config{'no_index_href'}}, file => [ 'README.mkd', $config{'no_index_href'}{file} ? @{$config{'no_index_href'}{file}} : () ], }
